%% New BEM for like the millionth and 1 time
clear; close all; clc; 

% Add important folders to the path to call functions and open inputs
functions_folder = ".\functions";
input_folder     = ".\inputs";
addpath(functions_folder);
addpath(input_folder);

% Blade Geometry
B = 3;                % Number of blades                       [#]
R = 50;               % Bladius                                [m]
RootLocation_R = 0.2; % Location of the root over the radius   [-]
TipLocation_R  = 1;   % Location of tip over the radius        [-]
r0 = 0.2*R;           % Radius of first element                [m]
theta = 2;            % Pitch angle                            [deg]
% Initial streamtube discretization
N = 81;               % Number of blade elements               [#]
Nazim = 36;           % Number of azimuthal positions          [#]
% Freestream conditions
rho = 1.225;          % Density of air                         [kg/m3]
Uinf = 10;            % Unperturbed wind speed                 [m/s]
p_inf = 1;            % Freestream pressure                    [Pa]
% Corrections used
glc = 1;              % We want the glauert correction         [-]
glc_us = 0;           % We do not want the glauert correction for unsteady
UsePrandtl = 1;       % Flag for using Prandtl correction      [-]

% Calculate radial distribution (linearly spaced)
r_blade = linspace(r0, R, N);
% Calculate twist distribution
twist_blade = 14*(1-r_blade/R);
% Calculate chord distribution 
chord_blade = 3*(1-r_blade/R) + 1;



%% Tasks
% Parameters task 1 -------------------------------------------------------
U0 = 10;                    % Downstream wind velocity [m/s]
TSR = 10;                   % range of TSR
file_name = 'DU95W180.csv'; % cl,cd,cm,alpha data for airfoil
omega = U0*TSR/R;           % Rotor speeds for TSR

% Parameters task 2 -------------------------------------------------------
yaw_angle = 0;                % Yaw angle [deg] 
% tsr_2 = 8;                  % Tip-speed ratio for task 2 [-]
% 
% % Parameters task 3 -------------------------------------------------------
% ct_3 = 0.75;                % Limiting Thrust Coefficient 
% tsr_3 = 8;                  % Design-tip-speed ratio
% area = 2*pi*R;
% 
% % Plot flag
% plotChecks = 0;

%% Load Polar Curves of the aerofoil and plot them
polar_data = table2array(readtable(file_name)); 
aoa = polar_data(:,1); %[deg]
cl = polar_data(:,2);
cd = polar_data(:,3);
cm = polar_data(:,4);

% Calculate maximum lift-to-drag ratio
Cl_Cd = cl./cd; [ClCdmax, iiCldesign] = max(Cl_Cd);
Cldesign = cl(iiCldesign); aoa_design = aoa(iiCldesign);


%% Plot the CT curve for non-yawed and yawed case
% Using the axial induction factor and the Glauert correction
% Series of induction factor
a_az = linspace(-0.5, 1, 100);

for ii = 1:length(yaw_angle)
    CTmom     = getCT(a_az, 0, yaw_angle(ii)); % CT without correction
    CTglauert = getCT(a_az, 1, yaw_angle(ii)); % CT with Glauert's correction

    % Calculate the induction factor based on the thrust coefficient
    a_back = ainduction(CTglauert, yaw_angle(ii));
    % Check the difference with the actual axial induction factor
    error_a = a_az - a_back;

end





%% Prandtl Tip Correction Function Test
% Axial induction factor to test the Prandtl's tip correction
a_test = 0.5;
% Define an array of radial positions, from root to tip
r_R = linspace(RootLocation_R, TipLocation_R, N);
% Define the centroides of the radial elements
r_Rc = 0.5*(r_R(2:end) + r_R(1:end-1));
% Call Prandtl Tip Root Correction function
[Prandtl, Prandtltip, Prandtlroot] = ...
    PrandtlTipRootCorrection(r_R, RootLocation_R, TipLocation_R, TSR,...
    B, a_test);

%% Call BEM Algorithm
% Solve BEM model (Iteratively go through the tip-speed ratios, blade
% elements and azimuthal positions)

% Define the azimuthal position array 
psi_annuli = linspace(0, 360, Nazim+1); % Azimuthal position [deg]
% Define the non-dimensional array position
clear r_R
r_R = r_blade / R;
% Discretization step in radial direction
dr_R = r_R(2:end) - r_R(1:end-1);
dr   = dr_R * R;
% Area annuli elements 
% dA   = (r_R(2:end).^2 - r_R(1:end-1).^2)*pi*R^2; % ----> NOT USED

%% Task 1 Â· BEM for different TSR of a Wind Turbine

% Preallocate the variables to store them in the loop
Thrust   = zeros(N-1, 1); % Thrust for each TSR
Torque   = zeros(N-1, 1); % Torque for each TSR
Power    = zeros(N-1, 1); % Power for each TSR
a        = zeros(N-1, 1); % Axial induction factor
aline    = zeros(N-1, 1); % Tangential induction factor
fnorm    = zeros(N-1, 1); % Normal force component
ftan     = zeros(N-1, 1); % Tangential force component
gamma    = zeros(N-1, 1); % Circulation 
infang   = zeros(N-1, 1); % Inflow angle
aoa_be   = zeros(N-1, 1); % Angle of attack of the blade element
Cq       = zeros(N-1, 1); % Torque coeff of the blade element


    % Call the BEM code for azimuthal discretisation solution
    [a(:,1), aline(:,1), fnorm(:,1), ftan(:,1), ...
        gamma(:,1), infang(:,1), aoa_be(:,1), Cq(:,1)] = ...
    solveAzimuthalBEM(N, Nazim, r_blade, chord_blade, twist_blade, ...
    psi_annuli, Uinf, r_R, RootLocation_R, TipLocation_R ,omega, R, B, ...
    aoa, cl, cd, yaw_angle, theta, UsePrandtl);


    % Calculate the overall power and thrust coefficients
    CT = sum(dr.*fnorm(:,1)'*B/(0.5*Uinf^2*pi*R^2));
    CQ = sum(dr.*ftan(:,1)'.*r_Rc*R*B/(0.5*Uinf^2*pi*R^3));
    CP = sum(dr.*ftan(:,1)'.*r_Rc*R*B*omega/(0.5*Uinf^3*pi*R^2));
    Cq(:,1) = dr.*ftan(:,1)'.*r_Rc*R*B/(0.5*Uinf^2*pi*R^3);
    
    % Thrust, torque and power distribution
    Thrust(:,1) = fnorm(:,1)'*B;
    Torque(:,1) = ftan(:,1)'.*r_Rc*R*B;
    Power(:,1) = ftan(:,1)'.*r_Rc*R*B*omega;
    % Total power, thrust and torque
    P  = CP * (0.5*Uinf^3*pi*R^2);
    Q  = P / omega;
    T  = CT * 0.5*Uinf^2*pi*R^2;
